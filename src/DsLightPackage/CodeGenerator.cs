/*
 * DsLight
 * 
 * Copyright (c) 2014..2018 by Simon Baer
 * 
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program;
 * If not, see http://www.gnu.org/licenses/.
 *
 */

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;

using deceed.DsLight.EditorGUI.DB;
using deceed.DsLight.EditorGUI.Model;

namespace deceed.DsLightPackage
{
    internal class CodeGenerator
    {
        private DataModel dataModel;
        private string namespaceName;

        /// <summary>
        /// Create a new instance.
        /// </summary>
        /// <param name="dataModel">data model instance</param>
        /// <param name="namespaceName">namespace used in generated file</param>
        public CodeGenerator(DataModel dataModel, string namespaceName)
        {
            this.dataModel = dataModel;
            this.namespaceName = namespaceName;
        }

        /// <summary>
        /// Generate a .cs file and return it as a string.
        /// </summary>
        /// <returns>file content</returns>
        public string Generate()
        {
            StringBuilder sb = new StringBuilder();
            using (StringWriter sw = new StringWriter(sb))
            {
                WriteHeader(sw);
                dataModel.Entities.OrderBy(x => x.Name).ToList().ForEach(entity => WriteEntity(sw, entity));
                WriteFooter(sw);
            }
            return sb.ToString();
        }

        /// <summary>
        /// Write the file header.
        /// </summary>
        /// <param name="sw">TextWriter</param>
        private void WriteHeader(TextWriter sw)
        {
            sw.WriteLine("//");
            sw.WriteLine("// This file is auto-generated by the DsLight Visual Studio extension, (c) 2014 by Simon Baer.");
            sw.WriteLine("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
            sw.WriteLine("//");
            sw.WriteLine();
            sw.WriteLine("using System;");
            sw.WriteLine("using System.Data;");
            sw.WriteLine("using System.Data.SqlClient;");
            sw.WriteLine("using System.Collections.Generic;");
            sw.WriteLine();
            sw.WriteLine("namespace {0}", namespaceName);
            sw.Write("{");
        }

        /// <summary>
        /// Write the file footer.
        /// </summary>
        /// <param name="sw">TextWriter</param>
        private void WriteFooter(TextWriter sw)
        {
            sw.WriteLine("}");
        }

        /// <summary>
        /// Write 3 classes for an entity:
        ///     class xxxRow
        ///     class xxxTable
        ///     class xxxTableAdapter
        /// </summary>
        /// <param name="sw">TextWriter</param>
        /// <param name="entity">Entity to write</param>
        private void WriteEntity(TextWriter sw, Entity entity)
        {
            if (entity.Properties.Count > 0)
            {
                sw.WriteLine();
                sw.WriteLine(@"    /// <summary>");
                sw.WriteLine(@"    /// A single entity '{0}'.", entity.Name);
                sw.WriteLine(@"    /// </summary>");
                sw.WriteLine("    public class {0}Row", entity.Name);
                sw.WriteLine("    {");
                foreach (Property prop in entity.Properties)
                {
                    sw.WriteLine("        public {0} {1} {{ get; set; }}", prop.TypeName, prop.Name);
                }
                sw.WriteLine("    }");
                sw.WriteLine();

                sw.WriteLine(@"    /// <summary>");
                sw.WriteLine(@"    /// A list of '{0}' entities.", entity.Name);
                sw.WriteLine(@"    /// </summary>");
                sw.WriteLine("    public class {0}Table : List<{0}Row>", entity.Name);
                sw.WriteLine("    {");
                sw.WriteLine("    }");
                sw.WriteLine();
            }

            sw.WriteLine(@"    /// <summary>");
            sw.WriteLine(@"    /// Methods for accessing the database.");
            sw.WriteLine(@"    /// </summary>");
            sw.WriteLine("    public class {0}TableAdapter", entity.Name);
            sw.WriteLine("    {");
            sw.WriteLine(@"        private SqlConnection connection;

        /// <summary>
        /// Gets the database connection.
        /// </summary>
        public SqlConnection Connection
        {
            get
            {
                if (connection == null)
                {
                    connection = new SqlConnection();");

            if (!string.IsNullOrEmpty(dataModel.ConnectionStringShortName) && (dataModel.ConnectionStringShortName != "(None)"))
            {
                if (dataModel.UseWebConfigForConnectionString)
                {
                    sw.WriteLine(@"                    connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings[""" + dataModel.ConnectionStringShortName + @"""].ConnectionString;");
                }
                else
                {
                    sw.WriteLine(@"                    connection.ConnectionString = (string)Properties.Settings.Default." + dataModel.ConnectionStringShortName + ";");
                }
            }
            sw.WriteLine(@"                }
                return connection;
            }
        }");

            bool addReadBinary = false;
            foreach (Query query in entity.Queries)
            {
                sw.WriteLine();
                sw.WriteLine(@"        /// <summary>");
                sw.WriteLine(@"        /// " + GetMethodComment(query, entity));
                sw.WriteLine(@"        /// </summary>");
                sw.WriteLine("        public {0} {1}({2})", GetReturnType(query, entity), query.Name, GetArgList(query.Parameters));
                sw.WriteLine("        {");
                sw.WriteLine("            Connection.Open();");
                sw.WriteLine("            try");
                sw.WriteLine("            {");

                // command
                sw.WriteLine("                SqlCommand command = new SqlCommand() {{ Connection = Connection, CommandText = @\"{0}\", CommandType = CommandType.{1} }};", query.CommandText.Replace("\"", "\"\""), query.CommandType);
                foreach (SPParam param in query.Parameters)
                {
                    sw.WriteLine("                command.Parameters.Add(new SqlParameter() {{ ParameterName = \"{0}\", DbType = DbType.{1}, Value = {2}{3} }});", param.Name.TrimStart('@'), param.DbType, CamelCase(param.Name), param.IsOutput ? ", Direction = ParameterDirection.InputOutput" : "");
                }
                sw.WriteLine();

                if (query.ExecuteMethod == ExecuteMethod.Reader)
                {
                    // execute reader
                    sw.WriteLine("                {0}Table table = new {0}Table();", entity.Name);
                    sw.WriteLine("                SqlDataReader reader = command.ExecuteReader();");
                    sw.WriteLine("                while (reader.Read())");
                    sw.WriteLine("                {");
                    sw.WriteLine("                    table.Add(new {0}Row", entity.Name);
                    sw.WriteLine("                    {");
                    int colIdx = 0;
                    foreach (Property prop in entity.Properties)
                    {
                        if (prop.TypeName == "byte[]")
                        {
                            sw.WriteLine("                        {0} = reader.IsDBNull({1}) ? (byte[])null : ReadBinary(reader.GetSqlBytes({1})),", prop.Name, colIdx);
                            addReadBinary = true;
                        }
                        else if (prop.IsNullable || (prop.TypeName == "string"))
                        {
                            sw.WriteLine("                        {0} = reader.IsDBNull({2}) ? ({3})null : reader.{1}({2}),", prop.Name, GetMethod(prop.DbType), colIdx, prop.TypeName);
                        }
                        else
                        {
                            sw.WriteLine("                        {0} = reader.{1}({2}),", prop.Name, GetMethod(prop.DbType), colIdx);
                        }
                        colIdx++;
                    }
                    sw.WriteLine("                    });");
                    sw.WriteLine("                };");
                    FillOutputParameter(sw, query.Parameters);
                    sw.WriteLine("                return table;");
                }
                else if (query.ExecuteMethod == ExecuteMethod.Scalar)
                {
                    // execute scalar
                    sw.WriteLine("                {0} result = ({0})command.ExecuteScalar();", query.ReturnType);
                    FillOutputParameter(sw, query.Parameters);
                    sw.WriteLine("                return result;");
                }
                else
                {
                    // execute non query
                    sw.WriteLine("                int result = command.ExecuteNonQuery();");
                    FillOutputParameter(sw, query.Parameters);
                    sw.WriteLine("                return result;");
                }
                sw.WriteLine("            }");
                sw.WriteLine("            finally");
                sw.WriteLine("            {");
                sw.WriteLine("                Connection.Close();");
                sw.WriteLine("            }");
                sw.WriteLine("        }");
            }

            if (addReadBinary)
            {
                sw.WriteLine(@"
        /// <summary>
        /// Helper method for reading an array of bytes.
        /// </summary>
        private byte[] ReadBinary(System.Data.SqlTypes.SqlBytes sqlBytes)
        {
            byte[] result = new byte[sqlBytes.Length];
            Array.Copy(sqlBytes.Buffer, result, sqlBytes.Length);
            return result;
        }");
            }

            sw.WriteLine("    }");
        }

        /// <summary>
        /// If there are output parameters, they must be set before returning.
        /// </summary>
        /// <param name="sw">TextWriter</param>
        /// <param name="parameters">list of parameters</param>
        private void FillOutputParameter(TextWriter sw, List<SPParam> parameters)
        {
            foreach (SPParam param in parameters)
            {
                if (param.IsOutput)
                {
                    sw.WriteLine("                {0} = ({1})command.Parameters[\"{2}\"].Value;", CamelCase(param.Name), param.SysType, param.Name);
                }
            }
        }

        /// <summary>
        /// Returns the return-type of a query as a string.
        /// </summary>
        /// <param name="query">Query object</param>
        /// <param name="entity">Entity object</param>
        /// <returns>return type as string</returns>
        private string GetReturnType(Query query, Entity entity)
        {
            switch (query.ExecuteMethod)
            {
                case ExecuteMethod.Reader:
                    return entity.Name + "Table";
                case ExecuteMethod.Scalar:
                    return query.ReturnType;
                default:
                    return "int";
            }
        }

        /// <summary>
        /// Returns a string that is used in the comment section of the table adapter method.
        /// </summary>
        /// <param name="executeMethod">ExecuteMethod</param>
        /// <param name="returnType">return type of query</param>
        /// <returns>comment text</returns>
        private string GetMethodComment(Query query, Entity entity)
        {
            if (query.ExecuteMethod == ExecuteMethod.Reader)
            {
                return "Returns a list of '" + entity.Name + "' entities.";
            }
            else if (query.ExecuteMethod == ExecuteMethod.Scalar)
            {
                return "Returns a single value of type '" + query.ReturnType + "'.";
            }
            else
            {
                return "Returns the number of affected rows.";
            }
        }

        /// <summary>
        /// Returns the argument list of a query as a string.
        /// </summary>
        /// <param name="parameters">list of parameters</param>
        /// <returns>parameter list as string</returns>
        private string GetArgList(List<SPParam> parameters)
        {
            StringBuilder sb = new StringBuilder();
            int loopCount = 1;
            foreach (var par in parameters)
            {
                if (par.IsOutput)
                {
                    sb.Append("ref ");
                }
                sb.AppendFormat("{0} {1}", par.SysType, CamelCase(par.Name));
                if (loopCount < parameters.Count)
                {
                    sb.Append(", ");
                }
                loopCount++;
            }
            return sb.ToString();
        }

        /// <summary>
        /// Convert the first letter of a string into lowercase.
        /// </summary>
        /// <param name="text">text to convert</param>
        /// <returns>converted text</returns>
        private string CamelCase(string text)
        {
            if (text.Length == 1)
            {
                return text.ToLower();
            }
            else if (text.Length > 1)
            {
                return text.Substring(0, 1).ToLower() + text.Substring(1);
            }
            return text;
        }

        /// <summary>
        /// Returns the name of the SqlDataReader method that is used to read
        /// a column of the given data type.
        /// </summary>
        /// <param name="dbType">data type</param>
        /// <returns>method name</returns>
        private string GetMethod(string dbType)
        {
            switch (dbType)
            {
                case "AnsiString":
                case "AnsiStringFixedLength":
                    dbType = "String";
                    break;
                case "Time":
                    dbType = "TimeSpan";
                    break;
                case "Currency":
                    dbType = "Decimal";
                    break;
                case "Single":
                    dbType = "Float";
                    break;
                case "Xml":
                    dbType = "String";
                    break;
            }
            return "Get" + dbType;
        }
    }
}
